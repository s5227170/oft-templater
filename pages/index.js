/* eslint-disable react/no-unescaped-entities */
import { useState } from "react";
import Head from "next/head";

import { MdArrowDropDownCircle } from "react-icons/md";

import Canvas from "../components/Canvas/Canvas";
import Menu from "../components/Menu/Menu";
import TitleContentManager from "../components/TitleManagement/TitleContentManager/TitleContentManager";
import HigherManagementButton from "../components/UI/HigherManagementButton/HigherManagementButton";
import DefaultPaddingManager from "../components/DefaultPaddingManagement/DefaultPaddingManager/DefaultPaddingManager";
import NewCanvasManager from "../components/NewCanvasManagement/NewCanvasManager/NewCanvasManager";

import boilerplate from "../content-components/boilerplate";
import downloadFile from "../util/downloadFile";

import classes from "../styles/global.module.scss";
import TabbedContent from "../components/UI/TabbedContent/TabbedContent";

export default function Home() {
  const [htmlContentString, setHtmlContentString] = useState(``);
  const [titleModalShow, setTitleModalShow] = useState(false);
  const [defaultPaddingModalShow, setDefaultPaddingModalShow] = useState(false);
  const [newCanvasShow, setNewCanvasShow] = useState(false);
  const [resetCanvas, setResetCanvas] = useState(false);
  const [emailTitle, setEmailTitle] = useState("");
  const [guideExpand, setGuideExpand] = useState(false);
  const [defaultComponentPadding, setDefaultComponentPadding] = useState({
    paddingLeft: 0,
    paddingRight: 0,
    paddingTop: 0,
    paddingBottom: 0,
  });

  const tabConfig = [
    {
      title: "To begin",
      text: `To start using this tool, simply create a row from the button with a
    plus inside of it. This will generate a component that will allow
    for the creation of a certain type of a row, depending on the user's
    requirements. Once the user picks a row type, the row will be
    generated and slots for the different components will be created.
    These slots allow the users to add and customise content. Once the
    user has added and finished their component, they click on the tick
    icon in the upper right, which will confirm the changes and close
    the modal.`,
    },
    {
      title: "Rows",
      text: `Rows provide a button for limited customisations at the moment due
    to the early stage of the application. Some aspects like editing
    content after submission is currently not available. In order to
    change content, the user must replace an already existing row with a
    new one, and adjust its position through the row settings window,
    which can be accessed via the row buttons on the right.`,
    },
    { title: "Components", text: `` },
    { title: "Editing", text: `` },
    { title: "Notes", text: `` },
  ];

  const tackleModal = (type) => {
    if (type == "Title") {
      setTimeout(() => {
        setTitleModalShow(!titleModalShow);
      }, 250);
    }
    if (type == "DefaultPadding") {
      setTimeout(() => {
        setDefaultPaddingModalShow(!defaultPaddingModalShow);
      }, 250);
    }
    if (type == "NewCanvas") {
      setTimeout(() => {
        setNewCanvasShow(!newCanvasShow);
      }, 250);
    }
  };

  const exportHtmlHandler = async () => {
    const submitContent = boilerplate(
      htmlContentString ? htmlContentString : "No data",
      emailTitle ? emailTitle : "HTML title"
    );
    //use .replace(/(\r\n|\n|\r)/gm, ""); in case new line symbols arent removed on the BE
    fetch("http://localhost:3000/api/html", {
      method: "POST",
      body: JSON.stringify(submitContent),
    }).then(async (response) => {
      if (response) {
        fetch("http://localhost:3000/api/getHtml", {
          method: "GET",
        }).then(async (data) => {
          downloadFile(data);
        });
      }
    });
  };

  const confirmTitle = (title) => {
    setEmailTitle(title);
  };

  const guideExpandHandler = () => {
    setGuideExpand(!guideExpand);
  };

  const confirmNewCanvas = (reset) => {
    setResetCanvas(reset);
  };

  const confirmDefaultPadding = (setPaddings) => {
    setDefaultComponentPadding({
      paddingLeft: setPaddings.paddingLeft,
      paddingRight: setPaddings.paddingRight,
      paddingTop: setPaddings.paddingTop,
      paddingBottom: setPaddings.paddingBottom,
    });
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Menu tackleModal={tackleModal} />
        <div
          className={classes.Guide}
          style={{
            height: guideExpand ? "fit-content" : "50px",
            transition: ".2s",
          }}
        >
          <MdArrowDropDownCircle
            className={classes.DropdownToggle}
            color="#40cd9a"
            size="30"
            onClick={guideExpandHandler}
            style={{
              transform: guideExpand ? "rotate(180deg)" : "rotate(0deg)",
              transition: ".2s",
            }}
          />
          <h1>Guide</h1>
          <TabbedContent contents={tabConfig} />
        </div>
        <div className={classes.Export}>
          <HigherManagementButton submitHandler={exportHtmlHandler}>
            Export HTML
          </HigherManagementButton>
        </div>

        <Canvas
          setHTML={setHtmlContentString}
          defaultComponentPaddings={defaultComponentPadding}
          newCanvas={resetCanvas}
          resetCanvasSetting={confirmNewCanvas}
          guideExpand={guideExpand}
        />
        <TitleContentManager
          tackleModal={() => tackleModal("Title")}
          modalShow={titleModalShow}
          confirmTitle={confirmTitle}
        />
        <DefaultPaddingManager
          tackleModal={() => tackleModal("DefaultPadding")}
          modalShow={defaultPaddingModalShow}
          confirmDefaultPadding={confirmDefaultPadding}
          defaultComponentPaddings={defaultComponentPadding}
        />
        <NewCanvasManager
          tackleModal={() => tackleModal("NewCanvas")}
          modalShow={newCanvasShow}
          confirmHandler={confirmNewCanvas}
        />
      </main>
    </>
  );
}
